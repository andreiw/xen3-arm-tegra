Xen3 ARMv7/Tegra2 work
======================

This is a an effort to bring up Samsung's Xen3 tree on
Tegra2. It's meant as a stepping stone to the Xen4 port.
Or maybe not. We'll see.

"Bring up" is a very relative word... most of the code
I end up having to (re)write isn't platform specific.
On the other hand, writing an OS is much more exciting
than making an existing one work on $FOO chip, so
I can't complain ;-).

Once the "basics" are in, the more interesting work
of figuring out the correct subset of hypercalls
and porting the Tegra2 Linux kernel to be PV can begin.


Differences
===========

Compatibility with Samsung's tree (or other Xen ARM efforts) is
not a goal. Compatibility at hypercall interface is a non-goal
as well.

Current differences from Samsung's tree:
1) ARMv7-only support.
2) Dom0/U configuration is not hardcoded.
3) Boot through ATAG-compatible bootloader, with all images passed
   through a "boot volume".
4) Kernel threads ("xen domains").
5) No ACM, given likely hypercall changes.


Building
========

$ make menuconfig
$ make


Boot volume
===========

To get anywhere, you need to create a boot volume. This is a CPIO archive that at least
should contain a 'dom0' and 'initrd0' files.

Assuming the current directory contains the boot volume contents, the following
command will create a valid Xen boot volume.

$ find . | cpio --create --format='newc' > ../bootvol.img


Running
=======

Assuming you have a Xoom with the serial port through the headphone h^Hjack.

$ sudo fastboot boot  /home/andreiw/src/xen3-arm-tegra/dist/install/boot/xen-bin-3.0.2-2 bootvol.img

ATAG    (P): 0x00000100
Linked  (V): 0xff008000
Actual  (P): 0x00a00800
Desired (P): 0x00108000

Handing off to C...
[XEN]  __  __            _____  ___   ____    ____  
[XEN]  \ \/ /___ _ __   |___ / / _ \ |___ \  |___ \ 
[XEN]   \  // _ \ '_ \    |_ \| | | |  __) |__ __) |
[XEN]   /  \  __/ | | |  ___) | |_| | / __/|__/ __/ 
[XEN]  /_/\_\___|_| |_| |____(_)___(_)_____| |_____|
[XEN]                                               
[XEN] Xen/ARMv7 virtual machine monitor for ARM architecture
[XEN] Copyright (C) 2012 Andrei Warkentin <andreiw@msalumni.com>
[XEN] Copyright (C) 2007 Samsung Electronics Co, Ltd. All Rights Reserved.
[XEN]  http://www.cl.cam.ac.uk/netos/xen
[XEN]  University of Cambridge Computer Laboratory
[XEN] 
[XEN]  Xen version 3.0.2-2 (andreiw@localdomain) (gcc version 4.4.3 (GCC) ) Fri Sep  7 19:20:40 EDT 2012
[XEN]  Platform: arm-tegra
[XEN]  GIT SHA: 32d9ee835326ff17a1fa7c4cf13a83d9ba285c19
[XEN]  Kernel command line: <NULL>
[XEN]  Boot volume: 0x5000000-0x5022400
[XEN] TTB PA 0x104000
[XEN] idle_pgd VA 0xff004000
[XEN] xen_pstart 0x0
[XEN] xen_pend 0x40000000
[XEN] _end 0xff04206c
[XEN] _end VA 0x14206C
[XEN] nr_pages needed for all page_infos = 0x500
[XEN] frame table is at 0xff043000-0xff543000
[XEN] xenheap_phys_start = 0x64c000 (VA 0xff54c000)
[XEN] xenheap_phys_end = 0x84c000 (VA 0xff74c000)
[XEN] looking at bank 0
[XEN]         base - 0x0
[XEN]         end  - 0x40000000
[XEN] calling init_boot_pages on 0x64c000-0x40000000
[XEN] calling init_xenheap_pages on 0x64c000-0x84c000
[XEN] FIQ debugger enabled
[XEN] Using scheduler: Simple EDF Scheduler (sedf)
[XEN] add to list
[XEN] add to list
[XEN] in sched
[XEN] switching from 7fff to 1
[XEN] Hello from a Xen domain 1!
[XEN] in sched
[XEN] switching from 1 to 2
[XEN] Hello from a Xen domain 2!
[XEN] in sched
[XEN] switching from 2 to 1
[XEN] Hello from a Xen domain 1!
[XEN] in sched
[XEN] switching from 1 to 2
[XEN] Hello from a Xen domain 2!
[XEN] in sched
[XEN] switching from 2 to 1
[XEN] Hello from a Xen domain 1!
[XEN] in sched
[XEN] switching from 1 to 2
[XEN] Hello from a Xen domain 2!
[XEN] in sched
[XEN] switching from 2 to 1
[XEN] Hello from a Xen domain 1!
[XEN] in sched
[XEN] switching from 1 to 2
[XEN] Hello from a Xen domain 2!
[XEN] in sched
[XEN] switching from 2 to 1
[XEN] Hello from a Xen domain 1!
[XEN] in sched
[XEN] switching from 1 to 2
[XEN] Hello from a Xen domain 2!
[XEN] in sched
[XEN] switching from 2 to 1
[XEN] Hello from a Xen domain 1!


Status
======

* Interrupts and timer working.
* Fixes to memory allocators (did it ever work before?)
* A "boot volume" passed by the bootloader (CPIO archive) is
  expected to contain /dom0 and /initrd0, which constitute dom0
  kernel and initrd, respectively.
* Beginnings of a FIQ-based serial debugger which currently can
  dump regs, version and a simple backtrace.
* Dom0 loading code is more-or-less in place.
* Passing control to Dom0 doesn't work yet.
* Beginnings of cooperative threading (I call them Xen domains).

Next up:
* Fixing the wacky stuff with different regs getting
  saved in IRQ versus ABT, and fix code in arch/arm/xen/traps.c.
* Continue to slash and burn through existing dom0 boot code - 
  need to figure out why non-manager DACR values don't work
  (probably paging code).
* Grow the threading code.


Changelog (more or less)
========================

Sep-08-2012: Major source cleaning.
Sep-07-2012: Added xen domains (coop threading).
Sep-04-2012: Dom0 bring-up work.
Apr-09-2012: Update panic/debug logic.
Apr-08-2012: FIQ debugger some more.
Mar-24-2012: FIQ debugger beginnings, refactored out UART.
Mar-19-2012: Boot volume stuff and xensetup.c cleanup.
Mar-14-2012: Timer and delay working.
Mar-06-2012: GIC/legacy IC stuff in (except for IRQ path),
             timer work - unfinished. Fix HIGH_VECTORS
             and NR_IRQs. Remove unmaintained crud.
Mar-05-2012: Wire GIC and legacy IC stuff.
Mar-02-2012: First work since summer, fixed mm bugs.
Jun-23-2011: Initial commit.


TODO
====

Here goes various stuff that consitutes braindead design
that came from Samsung's EmbeddedXen, and various odds and
ends and which need some lovin', but not immediately.
1) Instead of placing pgd 16K below load address, put it
   after the loaded image.
2) EmbeddedXen put the IVT at PHYS_OFFSET (another 16k
   below pgd, really). I fixed that nonsense by using
   a heap page, but that seems wasteful - just use
   an existing kernel page and map it again.
3) Think about frame table location. Currently after
   kernel image.
4) Fix the link address being 0x8000 - with pgd moved
   should have no reason for this nonsense.
5) Fix percpu to support SMP.

Nice to have:
1) tegrafb for debugging
2) GDB stubs
3) Control of GPIOs to reset, blink leds, etc. More
   for debugging, although by the time I get to a PV
   kernel, a sanitized view on GPIOs will need to be
   exposed via a hypercall.

Hacking away
============

You're welcome! I'd love to hear about and see your changes.

I use emacs, and have a special editing mode that I tend to like.

    (defun xen-c-mode ()
      "C mode with adjusted defaults for use with my Xen source."
      (interactive)
      (c-mode)
      (c-set-style "K&R")
      (setq tab-width 3)
      (setq indent-tabs-mode nil)
      (setq c-basic-offset 3)
      (setq show-trailing-whitespace t))

      ;; Draw tabs with the same color as trailing whitespace  

      (add-hook 'font-lock-mode-hook  
                (lambda ()  
                  (font-lock-add-keywords  
                   nil  
                   '(("\t" 0 'trailing-whitespace prepend)))))


Contact Info
============

Andrei Warkentin <andreiw@vmware.com>
Andrei Warkentin <andreiw@msalumni.com>
Andrei Warkentin <andrey.warkentin@gmail.com> 